package org.jax.mgi.bio.seqfilter;

import org.jax.informatics.database.sybase.*; //MGIDriverManager
import java.sql.*;
import java.util.*;
import org.jax.mgi.bio.seqrecord.*;

public class MGIDecider extends SeqDecider
{
	//Concept:
        //        IS: an object that applies this predicate to a sequence record	//	      'does a seqId of this sequence record hava a MGI ID in
	//		the MGI database? '
        //       HAS: SQL query strings to query MGI and a hashmap of 
	// 	      accId/mgiId pairs 
        //      DOES: Queries MGI with appropriate query determined by 's'
	//    	       storing the results in key = seqId value = MGI ID pairs
	//	       for easy access 
	//	      Decides if a sequence record seqId has an MGI ID 
	//		
        // Implementation:

	//
	//constructors 
	//

	public MGIDecider(String s) throws SQLException
	{
	 // Purpose: Initialize "name" in superclass to 's'
	 //           The type of query is determined by 's'
	 //	     Get the database server, database, database user, and 
	 // 	      database password from Java System Properties.
	 //	     Queries an MGI database for MGI ID / seqId pairs with 
	 //		different criteria depending on 's'
	 // Throws: An SQL exception if queryMGI fails  

		super(s);
	
		this.server = System.getProperty("DBSERVER");
        	this.database = System.getProperty("DATABASE");
        	this.user = System.getProperty("DBUSER");
        	this.password = System.getProperty("DBPASSWORD");
		this.directDatabaseURL = System.getProperty("DIRECTDBURL");
		queryMGI();
	}

	//
	//methods
	//

	public boolean isA(SeqRecord sr)
	{
	// Purpose: Decides if one of a sequence record's seqId's has an 
	//	      MGI ID
	//          Increments counters 
        // Returns: boolean true of false
        // Assumes: nothing
        // Effects: nothing
        // Throws: nothing
        // Notes:
		
		// initialize answer to the predicate to false
		boolean answer = false;

		// get the seqId's of the sequence record object 'sr' 
		Vector seqIds = sr.getSeqIds();

		// iterate through 'sr' s seqIds
		for(int i =  0; i < seqIds.size(); i++)
		{
			//if this record has a primary or secondary seqId that
			//is stored in the MGI database return true 
			if (MGIMap.get(seqIds.elementAt(i)) != null)  
			{
				// if true increment counter for true predicates
                        	// and set answer to true.
				this.incrementTrueCtr();
				answer = true;
				
				// we have found an MGI id so quit loop
				// if we don't the counter will be incorrect
				break;
			}
		}
		// increment counter for total number of records processed.
		this.incrementAllCtr();
		
		return answer;
	}
	
	private void queryMGI()
	{
	// Purpose: Sets up a connection to a database
	//	    Queries a MGI database for seqId/MGI Id pairs based on 
	// 		ACC_ActualDB.name and ACC_MGIType.name = "marker" and 
	//		MRK_Types.name = "gene"
	//	    Places the query results in a HashMap for easy lookup
        // Returns: boolean true of false
        // Assumes: nothing 
        // Effects: nothing
        // Throws: SQL exception if database connection or SQL fails
        // Notes:
		
		// A ResultSet provides access to a table of data. An ResultSet
		// object is generated by executing a statement
		ResultSet results;	

		// loads a jdbc sybase driver into memory
		MGIDriverManager.init();	
						
		try
		{
			//Returns a database connection to the server/database 
			//implied by "directDatabaseURL"
			Connection con = MGIDriverManager.getConnection(
				this.server, 
				this.database, 
				this.user, 
				this.password, 
				this.directDatabaseURL);
			
			// creates a statement object for sending SQL statements
			// to the database
			Statement stmt = con.createStatement();
		
			// determine the type of query and execute it	
			if(this.name.equals("sprot"))
			{
				results = stmt.executeQuery(sprotQuery);
			}
			else if(this.name.equals("genbank"))
			{
				results = stmt.executeQuery(genbankQuery);
			}
			else
			{
				results = null;
				// throw new SQL Exception here and catch in the
				// filter
				System.err.println("No query for filter " + this.name);
			}

			//place query results in a HashMap structure
                	if(results != null)
			{
			    while ( results.next())
                		{
                            	MGIMap.put(results.getString(1), results.getString(2));
                		}
			}

		}
		catch(SQLException e)
		{
			System.err.println("SQLException: " + e.getMessage());
		}
	}
	
	//
	//instance variables
	//

	// The direct URL to the database
	private static String directDatabaseURL;
	
	// The database server
	private static String server; 
	
	// The database to query
	private static String database; 

	// The database user
	private static String user;

	// The database password	
	private static String password;

	// The query string for a SwissProt query
	private static String sprotQuery = "select ACC_Accession.accID, MRK_Mouse_View.mgiID from MRK_Mouse_View, ACC_Accession where ACC_Accession._Object_key = MRK_Mouse_View._Marker_key and MRK_Mouse_View._Marker_Type_key = 1 and ACC_Accession._MGIType_key = 2 and ACC_Accession._LogicalDB_key = 13";
	
	// The query string for a Genbank query
	private static String genbankQuery = "select ACC_Accession.accID, MRK_Mouse_View.mgiID from MRK_Mouse_View, ACC_Accession where ACC_Accession._Object_key = MRK_Mouse_View._Marker_key and MRK_Mouse_View._Marker_Type_key = 1 and ACC_Accession._MGIType_key = 2 and ACC_Accession._LogicalDB_key = 9";

	// The HashMap which provides easy access to the query results
	private HashMap MGIMap = new HashMap();
}
